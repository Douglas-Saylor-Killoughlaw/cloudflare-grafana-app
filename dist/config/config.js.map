{"version":3,"sources":["../../src/config/config.js"],"names":["configTemplate","_","CloudflareConfigCtrl","$scope","$injector","backendSrv","baseUrl","appEditCtrl","setPreUpdateHook","preUpdate","bind","setPostUpdateHook","postUpdate","appModel","jsonData","secureJsonData","apiValidated","apiError","enabled","tokenSet","validateApiConnection","then","is_updated","update","token","initDatasource","Promise","resolve","importDashboards","self","promise","get","resp","promises","organizations","organizationList","result","clusters","forEach","e","name","id","push","status","c","organization","all","previous","map","x","sort","next","isEqual","email","results","exists","some","ds","post","type","access","template"],"mappings":"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","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\n\nimport _ from 'lodash' ;\n\nclass CloudflareConfigCtrl {\n  constructor($scope, $injector, backendSrv) {\n    this.baseUrl = 'api/plugin-proxy/cloudflare-app/api/v4';\n    this.backendSrv = backendSrv;\n\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n\n    if (!this.appModel.jsonData) {\n      this.appModel.jsonData = {};\n    }\n    if (!this.appModel.secureJsonData) {\n      this.appModel.secureJsonData = {};\n    }\n\n    this.apiValidated = false;\n    this.apiError = false;\n\n    if (this.appModel.enabled && this.appModel.jsonData.tokenSet) {\n      this.validateApiConnection().then((is_updated) => {\n        if (is_updated) {\n          this.appEditCtrl.update();\n        }\n      });\n    }\n  }\n\n  preUpdate() {\n    if (this.appModel.secureJsonData.token)  {\n      this.appModel.jsonData.tokenSet = true;\n    }\n\n    return this.initDatasource();\n  }\n\n  postUpdate() {\n    if (!this.appModel.enabled) {\n      return Promise.resolve();\n    }\n\n    return this.appEditCtrl.importDashboards();\n  }\n\n  /* Make sure that we can hit the Cloudflare API. */\n  validateApiConnection() {\n    var self = this;\n    let is_updated = false;\n    var promise = this.backendSrv.get(this.baseUrl + '/user');\n    return promise.then((resp) => {\n      self.apiValidated = true;\n      /* Update organizations list */\n      let promises = [];\n      let organizations = [];\n      let organizationList = resp.result.organizations || [];\n      let clusters = [];\n      organizationList.forEach(e => {\n        if (e.name != \"SELF\" && e.id != \"0\") {\n          organizations.push({name: e.name, id: e.id, status: e.status});\n          /* Update list of clusters */\n          promises.push(self.backendSrv.get(\n            self.baseUrl + '/organizations/' + e.id + '/virtual_dns').then(resp => {\n              resp.result.forEach(c => {\n                c.organization = e.id;\n                clusters.push({id: c.id, organization: c.organization, name: c.name});\n              });\n          }));\n        }\n      });\n      /* Update user-level list of clusters */\n      promises.push(self.backendSrv.get(\n        self.baseUrl + '/user/virtual_dns').then(resp => {\n          resp.result.forEach(c => {\n            clusters.push({id: c.id, name: c.name});\n          });\n      }));\n      self.appModel.jsonData.organizations = organizations;\n      return Promise.all(promises).then(() => {\n        var previous = self.appModel.jsonData.clusters.map(x => { return x.id }).sort();\n        var next = clusters.map(x => { return x.id }).sort();\n        is_updated = !_.isEqual(previous, next);\n        self.appModel.jsonData.clusters = clusters;\n      })\n    }, () => {\n      self.apiValidated = false;\n      self.apiError = true;\n      return [];\n    }).then(() => {\n      return Promise.resolve(is_updated);\n    });\n  }\n\n  reset() {\n    this.appModel.jsonData.clusters = [];\n    this.appModel.jsonData.organizations = [];\n    this.appModel.jsonData.email = '';\n    this.appModel.jsonData.tokenSet = false;\n    this.appModel.secureJsonData = {};\n    this.apiValidated = false;\n  }\n\n  initDatasource() {\n    /* Check for existing datasource, or create a new one */\n    var self = this;\n    return self.backendSrv.get('api/datasources').then(function(results) {\n      var exists = results.some((ds) => {\n        return ds.name === \"cloudflare\";\n      });\n      if (exists) {\n        return Promise.resolve();\n      }\n      /* Create a new datasource */\n      return self.backendSrv.post('api/datasources', {\n          name: 'cloudflare',\n          type: 'cloudflare-api',\n          access: 'direct',\n          jsonData: {},\n      });\n    });\n  }\n}\n\nCloudflareConfigCtrl.template = configTemplate;\n\nexport {\n  CloudflareConfigCtrl as ConfigCtrl\n};\n"]}